{"version":3,"file":"static/js/99.9efc0dc0.chunk.js","mappings":"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","sources":["cmps/util/Modal.jsx","cmps/tableHeader/AddDataForm.jsx"],"sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Modal = ({ isOpen, children, onRequestClose }) => {\r\n\tif (!isOpen) {\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"modal-overlay\" onClick={onRequestClose} role=\"dialog\">\r\n\t\t\t<div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n\t\t\t\t<button className=\"modal-close-btn\" onClick={onRequestClose} aria-label=\"Close dialog\">\r\n\t\t\t\t\tx\r\n\t\t\t\t</button>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nModal.propTypes = {\r\n\tisOpen: PropTypes.bool.isRequired,\r\n\tonRequestClose: PropTypes.func.isRequired,\r\n\tchildren: PropTypes.node,\r\n}\r\n\r\nexport default Modal\r\n","import PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\nimport Modal from '../util/Modal'\r\n\r\nconst AddDataForm = ({ isOpen, onRequestClose, onAddData, columns }) => {\r\n\tconst [newData, setNewData] = useState({})\r\n\tconst [error, setError] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\tconst initialData = {}\r\n\t\tcolumns.forEach((column) => {\r\n\t\t\tif (column.type === 'boolean') {\r\n\t\t\t\tinitialData[column.id] = false\r\n\t\t\t} else if (column.type === 'number') {\r\n\t\t\t\tinitialData[column.id] = 0\r\n\t\t\t} else if (column.type === 'string') {\r\n\t\t\t\tinitialData[column.id] = ''\r\n\t\t\t} else {\r\n\t\t\t\tinitialData[column.id] = null\r\n\t\t\t\tsetError('Error: Unknown column type')\r\n\t\t\t}\r\n\t\t})\r\n\t\tsetNewData(initialData)\r\n\t}, [columns])\r\n\r\n\tconst handleChange = (event, column, type) => {\r\n\t\tconst value = type === 'boolean' ? event.target.checked : event.target.value\r\n\t\tsetNewData({ ...newData, [column.id]: value })\r\n\t}\r\n\r\n\tconst handleSubmit = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tonAddData(newData)\r\n\t\tonRequestClose()\r\n\t}\r\n\treturn (\r\n\t\t<Modal isOpen={isOpen} onRequestClose={onRequestClose}>\r\n\t\t\t{error && <p>{error}</p>}\r\n\t\t\t<div className=\"add-data-form\">\r\n\t\t\t\t<h2 id=\"form-title\">Add Data</h2>\r\n\t\t\t\t<form onSubmit={handleSubmit} aria-labelledby=\"form-title\">\r\n\t\t\t\t\t<div className=\"columns\">\r\n\t\t\t\t\t\t{columns.map((column) => (\r\n\t\t\t\t\t\t\t<label key={column.id}>\r\n\t\t\t\t\t\t\t\t{column.title}:\r\n\t\t\t\t\t\t\t\t{column.type === 'boolean' ? (\r\n\t\t\t\t\t\t\t\t\t<label className=\"checkbox-container\">\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"hidden-checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={newData[column.id] || false}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleChange(e, column, column.type)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"custom-checkbox\" />\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\ttype={column.type === 'number' ? 'number' : 'text'}\r\n\t\t\t\t\t\t\t\t\t\tvalue={newData[column.id] || ''}\r\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleChange(e, column, column.type)}\r\n\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</Modal>\r\n\t)\r\n}\r\n\r\nAddDataForm.propTypes = {\r\n\tisOpen: PropTypes.bool.isRequired,\r\n\tonRequestClose: PropTypes.func.isRequired,\r\n\tonAddData: PropTypes.func.isRequired,\r\n\tcolumns: PropTypes.arrayOf(\r\n\t\tPropTypes.shape({\r\n\t\t\tid: PropTypes.string.isRequired,\r\n\t\t\ttype: PropTypes.string.isRequired,\r\n\t\t\ttitle: PropTypes.string.isRequired,\r\n\t\t})\r\n\t).isRequired,\r\n}\r\n\r\nexport default AddDataForm\r\n"],"names":["_ref","isOpen","children","onRequestClose","_jsx","className","onClick","role","_jsxs","e","stopPropagation","onAddData","columns","_useState","useState","_useState2","_slicedToArray","newData","setNewData","_useState3","_useState4","error","setError","useEffect","initialData","forEach","column","type","id","handleChange","event","value","target","checked","_objectSpread","_defineProperty","Modal","onSubmit","preventDefault","map","title","onChange","required"],"sourceRoot":""}